{"version":3,"sources":["App.tsx","redux/store.ts","index.tsx","redux/ducks/product.ts","redux/ducks/productsList.ts","common/api.ts","styled/componentsStyles/HeaderStyle.ts","assets/img/gunsLogo.png","components/Header.tsx","styled/variables.ts","styled/commonStyles.ts","styled/componentsStyles/ProductItemStyle.ts","components/ProductItem.tsx","styled/componentsStyles/ProductListStyle.ts","components/ProductsList.tsx","styled/componentsStyles/AppStyles.ts","components/Preloader.tsx","components/Raiting.tsx","styled/componentsStyles/ReviewFormStyle.ts","components/ReviewForm.tsx"],"names":["LazyProductsList","lazy","then","default","ProductsList","LazyProductItem","ProductItem","App","Suspense","fallback","exact","path","render","sagaMiddleware","createSagaMiddleware","rootReducer","combineReducers","productsList","productsListReducer","product","productReducer","store","createStore","applyMiddleware","run","productsListSaga","productSaga","ReactDOM","StrictMode","document","getElementById","getProductsWatcher","getProductsWorker","addReviewWatcher","addReviewWorker","GET_PRODUCT","ADD_REVIEW","SET_PRODUCT","SET_REVIEW","initialState","id","name","img","description","rating","reviews","state","action","type","payload","review","getProduct","addReview","takeEvery","call","fetchProducts","response","put","products","console","log","all","getProductsListWatcher","getProductsListWorker","GET_PRODUCTS_LIST","SET_PRODUCTS_LIST","getProducts","a","fetch","json","StyledHeader","styled","Navbar","Header","bg","variant","to","Brand","alt","src","Logo","width","height","className","sizes","devices","mobile","tablet","laptop","StyledNavLink","NavLink","ProductInfoContainer","Row","ProductItemImg","ProductItemDescription","div","Heading","h4","Description","p","ProductRating","ProductReviews","StyledNavLinkArrow","ArrowBackButton","Button","dispatch","useDispatch","useSelector","useParams","useEffect","undefined","Number","Container","size","lg","Col","sm","md","length","map","index","submitHandler","ProductCard","Card","ProductImg","Img","ProductTitle","Title","productList","xs","style","textDecoration","Body","as","StyledSpinner","Spinner","Preloader","animation","role","Rating","Form","Label","htmlFor","srOnly","Control","custom","value","ReviewButton","ErrorBlock","ReviewForm","props","initialValues","validationSchema","Yup","max","required","onSubmit","values","setSubmitting","resetForm","handleSubmit","getFieldProps","touched","errors","noValidate","cols","rows","isInvalid"],"mappings":"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","file":"static/js/main.3e61abb7.chunk.js","sourcesContent":["import React, { lazy } from 'react';\r\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\r\n\r\nimport { ProductsList, ProductItem, Header, Preloader } from './components';\r\n\r\nconst LazyProductsList = lazy( () => import('./components/index')\r\n    .then( ({ ProductsList }) => ({ default: ProductsList }) )\r\n);\r\nconst LazyProductItem = lazy( () => import('./components/index')\r\n    .then( ({ ProductItem }) => ({ default: ProductItem }) )\r\n);\r\n\r\nexport const App = () => (\r\n    <React.Suspense fallback={<Preloader/>}>\r\n        <Router>\r\n            <Header/>\r\n            <Switch>\r\n                <Route exact path={'/'} render={() => <LazyProductsList/>}/>\r\n                <Route exact path={'/item/:id?'} render={() => <LazyProductItem/>}/>\r\n            </Switch>\r\n        </Router>\r\n    </React.Suspense>\r\n);\r\n","import { createStore, applyMiddleware, combineReducers } from 'redux'\r\nimport createSagaMiddleware from 'redux-saga'\r\n\r\nimport productReducer, { productSaga } from './ducks/product';\r\nimport productsListReducer, { productsListSaga } from './ducks/productsList';\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nconst rootReducer = combineReducers( {\r\n    productsList: productsListReducer,\r\n    product: productReducer\r\n} );\r\n\r\nexport const store = createStore( rootReducer, applyMiddleware( sagaMiddleware ) );\r\n\r\nsagaMiddleware.run( productsListSaga )\r\nsagaMiddleware.run( productSaga )\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\n\r\nimport { App } from './App';\r\n\r\nimport { store } from './redux/store';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <Provider store={store}>\r\n            <App />\r\n        </Provider>\r\n    </React.StrictMode>,\r\n    document.getElementById( 'root' )\r\n);\r\n","import { all, call, put, takeEvery } from 'redux-saga/effects'\r\n\r\nimport { fetchProducts, ProductItemType, ProductsType } from '../../common/api';\r\n\r\nexport const GET_PRODUCT = 'my-app/redux/GET_PRODUCT';\r\nexport const ADD_REVIEW = 'my-app/redux/ADD_REVIEW';\r\nexport const SET_PRODUCT = 'my-app/redux/SET_PRODUCT';\r\nexport const SET_REVIEW = 'my-app/redux/SET_REVIEW';\r\n\r\nconst initialState = {\r\n    id: null,\r\n    name: '',\r\n    img: '',\r\n    description: '',\r\n    rating: null,\r\n    reviews: []\r\n};\r\n\r\nexport default function productReducer(state: ProductItemType = initialState, action: ProductActionsType) {\r\n    switch (action.type) {\r\n        case SET_PRODUCT:\r\n            return { ...state, ...action.payload }\r\n        case SET_REVIEW:\r\n            return { ...state, reviews: [action.review, ...state.reviews] }\r\n        default:\r\n            return state\r\n    }\r\n};\r\n\r\nexport const getProduct = (id: number) => ({ type: GET_PRODUCT, id }) as const;\r\nexport const addReview = (review: string) => ({ type: ADD_REVIEW, review }) as const;\r\nexport const setProduct = (payload: ProductItemType) => ({ type: SET_PRODUCT, payload }) as const;\r\nexport const setReview = (review: string) => ({ type: SET_REVIEW, review }) as const;\r\n\r\nfunction* getProductsWatcher() {\r\n    yield takeEvery( GET_PRODUCT, getProductsWorker )\r\n}\r\n\r\nfunction* getProductsWorker(action: getProductActionType) {\r\n    try {\r\n        const response: ProductsType = yield call( fetchProducts );\r\n        yield put( setProduct( response.products[action.id] ) )\r\n    } catch (error) {\r\n        console.log( error );\r\n    }\r\n}\r\n\r\nfunction* addReviewWatcher() {\r\n    yield takeEvery( ADD_REVIEW, addReviewWorker )\r\n}\r\n\r\nfunction* addReviewWorker(action: addReviewActionType) {\r\n    try {\r\n        yield put( setReview( action.review ) )\r\n    } catch (error) {\r\n        console.log( error )\r\n    }\r\n}\r\n\r\nexport function* productSaga() {\r\n    yield all( [\r\n        getProductsWatcher(),\r\n        addReviewWatcher()\r\n    ] );\r\n}\r\n\r\n\r\nexport type addReviewActionType = ReturnType<typeof addReview>\r\ntype getProductActionType = ReturnType<typeof getProduct>\r\ntype setProductActionType = ReturnType<typeof setProduct>\r\ntype setReviewActionType = ReturnType<typeof setReview>\r\n\r\ntype ProductActionsType =\r\n    getProductActionType |\r\n    setProductActionType |\r\n    addReviewActionType |\r\n    setReviewActionType\r\n","import { all, call, put, takeEvery } from 'redux-saga/effects';\r\n\r\nimport { fetchProducts, ProductsType } from '../../common/api';\r\n\r\nexport const GET_PRODUCTS_LIST = 'my-app/redux/GET_PRODUCTS_LIST';\r\nexport const SET_PRODUCTS_LIST = 'my-app/redux/SET_PRODUCTS_LIST';\r\n\r\nconst initialState = { products: [] };\r\n\r\nexport default function productsListReducer(state: ProductsType = initialState, action: ProductsListActionsType) {\r\n    switch (action.type) {\r\n        case SET_PRODUCTS_LIST:\r\n            return { ...state, products: action.payload.products }\r\n        default:\r\n            return state\r\n    }\r\n};\r\n\r\nexport const getProducts = () => ({ type: GET_PRODUCTS_LIST }) as const;\r\nexport const setProducts = (payload: ProductsType) => ({ type: SET_PRODUCTS_LIST, payload }) as const;\r\n\r\nfunction* getProductsListWatcher() {\r\n    yield takeEvery( GET_PRODUCTS_LIST, getProductsListWorker )\r\n}\r\n\r\nexport function* getProductsListWorker() {\r\n    try {\r\n        const response: ProductsType = yield call( fetchProducts );\r\n        yield put( setProducts( response ) )\r\n    } catch (error) {\r\n        console.log( error );\r\n    }\r\n}\r\n\r\nexport function* productsListSaga() {\r\n    yield all( [\r\n        getProductsListWatcher()\r\n    ] );\r\n}\r\n\r\ntype getProductsType = ReturnType<typeof getProducts>\r\ntype setProductsType = ReturnType<typeof setProducts>\r\n\r\ntype ProductsListActionsType =\r\n    getProductsType |\r\n    setProductsType\r\n","export type ProductItemType = {\r\n    id: number | null\r\n    name: string\r\n    img: string\r\n    description: string\r\n    rating: string | null\r\n    reviews: Array<string | null>\r\n}\r\n\r\nexport type ProductsType = {\r\n    products: Array<ProductItemType>\r\n}\r\n\r\nexport const fetchProducts = async (): Promise<ProductsType> => {\r\n    const response = await fetch( 'https://demo6435853.mockable.io/products' )\r\n    return await response.json();\r\n};\r\n","import styled from 'styled-components';\r\nimport { Navbar } from 'react-bootstrap';\r\n\r\nexport const StyledHeader = styled( Navbar )`\r\n  margin-bottom: 30px;\r\n  justify-content: space-between;\r\n`;\r\n","export default __webpack_public_path__ + \"static/media/gunsLogo.1e2fac89.png\";","import React, { FC } from 'react';\r\nimport { Navbar } from 'react-bootstrap';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nimport { StyledHeader } from '../styled/componentsStyles/HeaderStyle';\r\n\r\nimport Logo from '../assets/img/gunsLogo.png';\r\n\r\nexport const Header: FC = () => (\r\n    <>\r\n        <StyledHeader bg=\"dark\" variant=\"dark\">\r\n            <NavLink to=\"/\">\r\n                <Navbar.Brand>\r\n                    <img\r\n                        alt=\"\"\r\n                        src={Logo}\r\n                        width=\"30\"\r\n                        height=\"30\"\r\n                        className=\"d-inline-block align-top\"\r\n                    />{' '}\r\n                    GunsPlace\r\n                </Navbar.Brand>\r\n            </NavLink>\r\n        </StyledHeader>\r\n    </>\r\n);\r\n","export const white = '#FFF';\r\nexport const black = '#000';\r\nexport const red = '#c90000';\r\n\r\nconst sizes = {\r\n    mobile: '560px',\r\n    tablet: '992px',\r\n    laptop: '1200px'\r\n};\r\n\r\nexport const devices = {\r\n    mobile: `max-width: ${sizes.mobile}`,\r\n    tablet: `max-width: ${sizes.tablet}`,\r\n    laptop: `max-width: ${sizes.laptop}`\r\n};\r\n","import styled from 'styled-components';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nimport { black } from './variables';\r\n\r\nexport const StyledNavLink = styled( NavLink )`\r\n  text-decoration: none;\r\n  color: ${black}\r\n`;\r\n","import styled from 'styled-components';\r\nimport { Button, Row } from 'react-bootstrap';\r\n\r\nimport { StyledNavLink } from '../commonStyles';\r\nimport { white } from '../variables';\r\n\r\nexport const ProductInfoContainer = styled( Row )`\r\n  align-items: center;\r\n  margin-bottom: 30px;\r\n`;\r\n\r\nexport const ProductItemImg = styled.img`\r\n  width: 100%;\r\n  margin: 30px 0;\r\n`;\r\n\r\nexport const ProductItemDescription = styled.div`\r\n  width: 100%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: flex-start;\r\n  align-items: flex-start;\r\n  flex-wrap: wrap;\r\n`;\r\n\r\nexport const Heading = styled.h4``\r\n\r\nexport const Description = styled.p`\r\n  font-size: 14px;\r\n`;\r\n\r\nexport const ProductRating = styled( Row )`\r\n  margin-bottom: 50px;\r\n`;\r\nexport const ProductReviews = styled( Row )`\r\n  width: 100%;\r\n  margin: 0;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: flex-start;\r\n  align-items: flex-start;\r\n`;\r\n\r\nexport const StyledNavLinkArrow = styled( StyledNavLink )`\r\n  color: ${white};\r\n`;\r\n\r\nexport const ArrowBackButton = styled( Button )`\r\n  font-size: 30px;\r\n`;\r\n","import React, { FC, useEffect } from 'react';\r\nimport { Col, Container } from 'react-bootstrap';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useParams } from 'react-router-dom';\r\n\r\nimport {\r\n    ArrowBackButton,\r\n    Description,\r\n    Heading,\r\n    ProductInfoContainer,\r\n    ProductItemDescription,\r\n    ProductItemImg,\r\n    ProductRating,\r\n    ProductReviews,\r\n    StyledNavLinkArrow\r\n} from '../styled/componentsStyles/ProductItemStyle';\r\nimport { Rating, ReviewForm } from './index';\r\nimport { addReview, getProduct } from '../redux/ducks/product';\r\n\r\nimport { AppRootStateType } from '../redux/store';\r\nimport { ProductItemType } from \"../common/api\";\r\n\r\nexport const ProductItem: FC = () => {\r\n    const dispatch = useDispatch();\r\n    const product = useSelector<AppRootStateType, ProductItemType>( state => state.product );\r\n    const { img, name, description, rating, reviews } = product;\r\n    const submitHandler = (review: string) => dispatch( addReview( review ) );\r\n\r\n    let { id } = useParams<{ id?: string | undefined }>();\r\n\r\n    useEffect( () => {\r\n        if (id === undefined) id = '0'\r\n        dispatch( getProduct( Number( id ) ) )\r\n    }, [dispatch] );\r\n\r\n    return (\r\n        <>\r\n            {\r\n                <Container>\r\n                    <StyledNavLinkArrow to={'/'}>\r\n                        <ArrowBackButton variant=\"dark\" size=\"sm\">&#60;</ArrowBackButton>\r\n                    </StyledNavLinkArrow>\r\n                    <ProductInfoContainer lg={11}>\r\n                        <Col sm={10} md={6} lg={6}>\r\n                            <ProductItemImg src={img}/>\r\n                        </Col>\r\n                        <Col sm={10} md={6} lg={6}>\r\n                            <ProductItemDescription>\r\n                                <Heading>{name}</Heading>\r\n                                <Description>{description}</Description>\r\n                            </ProductItemDescription>\r\n                        </Col>\r\n                    </ProductInfoContainer>\r\n                    <ProductRating lg={10}>\r\n                        <Col>\r\n                            <div>\r\n                                <h4>Оценка: {rating}</h4>\r\n                            </div>\r\n                            <Rating/>\r\n                        </Col>\r\n                    </ProductRating>\r\n                    <ProductReviews sm={10} lg={12}>\r\n                        <h5>Отзывы:</h5>\r\n                        {!reviews ? '' :\r\n                            reviews.length !== 0 ?\r\n                                reviews.map( (review, index) => (\r\n                                        <p key={index}>{review}</p>\r\n                                    )\r\n                                ) :\r\n                                <p>Нет отзывов...</p>\r\n                        }\r\n                        <ReviewForm submitHandler={submitHandler}/>\r\n                    </ProductReviews>\r\n                </Container>\r\n            }\r\n        </>\r\n    )\r\n};\r\n","import styled from 'styled-components';\r\nimport { Card } from 'react-bootstrap';\r\n\r\nimport { devices } from '../variables';\r\n\r\nexport const ProductCard = styled( Card )`\r\n  min-height: 200px;\r\n  box-sizing: border-box;\r\n  transition: box-shadow 0.4s ease-in-out;\r\n  margin-bottom: 30px;\r\n\r\n  &:hover {\r\n    box-shadow: 0 0 10px rgba(0, 0, 0, 0.5);\r\n    cursor: pointer;\r\n  }\r\n\r\n  @media screen and (${devices.tablet}) {\r\n\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n\r\n  }\r\n`;\r\n\r\nexport const ProductImg = styled( Card.Img )`\r\n  width: 250px;\r\n  margin: 30px 20px 0;\r\n`;\r\n\r\nexport const ProductTitle = styled( Card.Title )`\r\n  color: black;\r\n\r\n  &:hover {\r\n    text-decoration: none;\r\n  }\r\n`;\r\n","import React, { FC, useEffect } from 'react';\r\nimport { Card, Col, Container, Row } from 'react-bootstrap';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport { getProducts } from '../redux/ducks/productsList';\r\nimport { StyledNavLink } from '../styled/commonStyles';\r\nimport { ProductCard, ProductImg, ProductTitle } from '../styled/componentsStyles/ProductListStyle';\r\n\r\nimport { AppRootStateType } from '../redux/store';\r\nimport { ProductsType } from \"../common/api\";\r\n\r\nexport const ProductsList: FC = () => {\r\n    const dispatch = useDispatch();\r\n    const productList = useSelector<AppRootStateType, ProductsType>( state => state.productsList );\r\n\r\n    useEffect( () => {\r\n        dispatch( getProducts() )\r\n    }, [dispatch] );\r\n\r\n    return (\r\n        <>\r\n            <Container>\r\n                <Row xs={1} md={2} lg={3}>\r\n                    {\r\n                        productList.products.map( product => (\r\n                                <Col key={product.id}>\r\n                                    <StyledNavLink to={`/item/${product.id}`}\r\n                                                   style={{ textDecoration: 'none' }}>\r\n                                        <ProductCard>\r\n                                            <ProductImg variant=\"top\" src={product.img}/>\r\n                                            <Card.Body>\r\n                                                <ProductTitle as=\"p\">{product.name}</ProductTitle>\r\n                                            </Card.Body>\r\n                                        </ProductCard>\r\n                                    </StyledNavLink>\r\n                                </Col>\r\n                            )\r\n                        )\r\n                    }\r\n                </Row>\r\n            </Container>\r\n        </>\r\n    )\r\n};\r\n","import styled from 'styled-components';\r\nimport { Spinner } from 'react-bootstrap';\r\n\r\nexport const StyledSpinner = styled( Spinner )`\r\n  margin: 20px;\r\n`;\r\n","import React, { FC } from 'react';\r\n\r\nimport { StyledSpinner } from '../styled/componentsStyles/AppStyles';\r\n\r\nexport const Preloader: FC = () =>\r\n    <>\r\n        <StyledSpinner\r\n            animation=\"border\"\r\n            role=\"status\">\r\n            <span className=\"sr-only\">Загрузка...</span>\r\n        </StyledSpinner>\r\n    </>;\r\n","import React, { FC } from 'react';\r\nimport { Button, Col, Form } from 'react-bootstrap';\r\n\r\nexport const Rating: FC = () => (\r\n    <Form>\r\n        <Form.Row className=\"align-items-center\">\r\n            <Col xs=\"auto\" className=\"my-1\">\r\n                <Form.Label className=\"mr-sm-2\" htmlFor=\"inlineFormCustomSelect\" srOnly>\r\n                    Preference\r\n                </Form.Label>\r\n                <Form.Control\r\n                    as=\"select\"\r\n                    className=\"mr-sm-2\"\r\n                    id=\"inlineFormCustomSelect\"\r\n                    custom\r\n                >\r\n                    <option value=\"0\">...</option>\r\n                    <option value=\"1\">1</option>\r\n                    <option value=\"2\">2</option>\r\n                    <option value=\"3\">3</option>\r\n                    <option value=\"4\">4</option>\r\n                    <option value=\"5\">5</option>\r\n                </Form.Control>\r\n            </Col>\r\n            <Col xs=\"auto\" className=\"my-1\">\r\n                <Button type=\"submit\">Поставить оценку</Button>\r\n            </Col>\r\n        </Form.Row>\r\n    </Form>\r\n);\r\n","import { Button } from 'react-bootstrap';\r\n\r\nimport styled from 'styled-components';\r\nimport { red } from '../variables';\r\n\r\nexport const ReviewButton = styled( Button )`\r\n  margin-top: 10px;\r\n  margin-bottom: 20px;\r\n`;\r\n\r\nexport const ErrorBlock = styled.div`\r\n  color: ${red}\r\n`;\r\n","import { Formik, FormikHelpers } from 'formik';\r\nimport React from 'react';\r\nimport { Form } from 'react-bootstrap';\r\nimport * as Yup from 'yup';\r\n\r\nimport { ErrorBlock, ReviewButton } from '../styled/componentsStyles/ReviewFormStyle';\r\nimport { addReviewActionType } from '../redux/ducks/product';\r\n\r\ntype ReviewPropsType = {\r\n    submitHandler: (review: string) => addReviewActionType\r\n}\r\n\r\ntype FormValuesType = {\r\n    review: string\r\n}\r\n\r\nexport const ReviewForm = (props: ReviewPropsType) =>\r\n    <>\r\n        <Formik\r\n            initialValues={{ review: '' }}\r\n            validationSchema={Yup.object( {\r\n                review: Yup.string()\r\n                    .max( 300, 'Длинна отзыва не должна превышать 300 символов' )\r\n                    .required( 'Отзыв не должен быть пустым' ),\r\n            } )}\r\n            onSubmit={(values, { setSubmitting, resetForm }: FormikHelpers<FormValuesType>) => {\r\n                props.submitHandler( values.review )\r\n                setSubmitting( false )\r\n                resetForm( {} )\r\n            }}>\r\n            {({\r\n                  handleSubmit,\r\n                  getFieldProps,\r\n                  touched,\r\n                  errors\r\n              }) => (\r\n                <Form\r\n                    noValidate\r\n                    onSubmit={handleSubmit}>\r\n                    <Form.Control\r\n                        as=\"textarea\"\r\n                        type=\"textarea\"\r\n                        cols={80} rows={2}\r\n                        isInvalid={!!errors.review}\r\n                        {...getFieldProps( 'review' )}/>\r\n                    {touched.review && errors.review ? (\r\n                        <ErrorBlock>{errors.review}</ErrorBlock>\r\n                    ) : null}\r\n                    <ReviewButton type=\"submit\">Оставить отзыв</ReviewButton>\r\n                </Form>\r\n            )\r\n            }\r\n        </Formik>\r\n    </>;\r\n"],"sourceRoot":""}